model New {
  id String @id @unique @default(cuid())
  @@schema("school")
}

model School {
  id            String   @id
  schoolName    String
  schoolAddress String
  schoolLogo    File?    @relation(name: "SchoolToLogo")
  classes       Class[]
  @@schema("school")
}

model Class {
  id         String      @id
  name       String
  section    String
  roomNumber String?
  capacity   Int
  schoolId   String
  createdAt  DateTime
  updatedAt  DateTime
  school     School      @relation(fields: [schoolId], references: [id])
  students   Student[]
  subjects   Subject[]
  classworks Classwork[]
  timeTable  TimeTable[]
  @@schema("school")
}

model Student {
  id              String         @id
  admissionNumber String         @unique
  name            String
  dateOfBirth     DateTime
  gender          String
  address         String
  contactNumber   String
  parentName      String
  parentContact   String
  parentEmail     String
  bloodGroup      String?
  classId         String
  createdAt       DateTime
  updatedAt       DateTime
  class           Class          @relation(fields: [classId], references: [id])
  attendance      Attendance[]
  homeworks       HomeworkSubmission[] // Change this to HomeworkSubmission[]
  notifications   Notification[]
  fees            Fee[]
  grievances      Grievance[]
  @@schema("school")
}

model Staff {
  id            String    @id
  employeeId    String    @unique
  name          String
  role          StaffRole
  qualification String
  experience    Int
  email         String    @unique
  contactNumber String
  address       String
  joiningDate   DateTime
  schoolId      String
  createdAt     DateTime
  updatedAt     DateTime
  subjects      Subject[]
  @@schema("school")

}

model Subject {
  id        String      @id
  name      String
  code      String
  classId   String
  teacherId String
  createdAt DateTime
  updatedAt DateTime
  class     Class       @relation(fields: [classId], references: [id])
  teacher   Staff       @relation(fields: [teacherId], references: [id])
  homeworks Homework[]
  timeTable TimeTable[]
  @@schema("school")

}

model Homework {
  id          String         @id
  title       String
  description String
  dueDate     DateTime
  subjectId   String
  classId     String        // Add this line
  status      HomeworkStatus
  createdAt   DateTime
  updatedAt   DateTime
  class       Class         @relation(fields: [classId], references: [id]) // Add this line
  subject     Subject        @relation(fields: [subjectId], references: [id])
  submissions HomeworkSubmission[] // Add this for student submissions
  attachments File[]
  @@schema("school")
}

// Add new model for student homework submissions
model HomeworkSubmission {
  id          String   @id @default(cuid())
  homeworkId  String
  studentId   String
  status      HomeworkStatus
  submittedAt DateTime
  homework    Homework @relation(fields: [homeworkId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
  attachments File[]   @relation("HomeworkSubmissionFiles") // Add relation name
  @@schema("school")
}

model Classwork {
  id          String   @id
  title       String
  description String
  date        DateTime
  classId     String
  createdAt   DateTime
  updatedAt   DateTime
  class       Class    @relation(fields: [classId], references: [id])
  attachments File[]
  @@schema("school")
}

model Fee {
  id            String    @id
  studentId     String
  amount        Float
  dueDate       DateTime
  feeType       FeeType
  status        FeeStatus
  paymentDate   DateTime?
  paymentMethod String?
  receiptNumber String?
  createdAt     DateTime
  updatedAt     DateTime
  student       Student   @relation(fields: [studentId], references: [id])
  attachments   File[]
  @@schema("school")

}

model Notification {
  id        String           @id
  title     String
  message   String
  type      NotificationType
  studentId String
  isRead    Boolean
  createdAt DateTime
  updatedAt DateTime
  student   Student          @relation(fields: [studentId], references: [id])
  @@schema("school")

}

model Grievance {
  id          String          @id
  title       String
  description String
  studentId   String
  status      GrievanceStatus
  resolution  String?
  createdAt   DateTime
  updatedAt   DateTime
  student     Student         @relation(fields: [studentId], references: [id])
  attachments File[]
  @@schema("school")
}

model Attendance {
  id        String           @id
  date      DateTime
  status    AttendanceStatus
  studentId String
  createdAt DateTime
  updatedAt DateTime
  student   Student          @relation(fields: [studentId], references: [id])
  @@schema("school")
}

model TimeTable {
  id        String    @id
  day       Int
  startTime DateTime
  endTime   DateTime
  classId   String
  subjectId String
  createdAt DateTime
  updatedAt DateTime
  class     Class     @relation(fields: [classId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])

  @@schema("school")

}

model File {
  id                   String              @id
  fileName             String
  fileType             String
  filePath             String
  uploadedAt           DateTime
  schoolId             String?             @unique
  homeworkId           String?
  homeworkSubmissionId String?             // Add this field
  classworkId          String?
  feeId                String?
  grievanceId          String?
  uploadedBy           String              @db.Uuid
  school               School?             @relation(name: "SchoolToLogo", fields: [schoolId], references: [id])
  homework             Homework?           @relation(fields: [homeworkId], references: [id])
  homeworkSubmission   HomeworkSubmission? @relation("HomeworkSubmissionFiles", fields: [homeworkSubmissionId], references: [id]) // Add this relation
  classwork            Classwork?          @relation(fields: [classworkId], references: [id])
  fee                  Fee?                @relation(fields: [feeId], references: [id])
  grievance            Grievance?          @relation(fields: [grievanceId], references: [id])
  user                 User                @relation(fields: [uploadedBy], references: [id], onDelete: NoAction, onUpdate: NoAction) @ignore

  @@schema("school")

}

/// Existing Supabase auth.users table reference - DO NOT MODIFY TABLE
model User {
  id         String   @id @default(uuid()) @db.Uuid
  phone      String?  @unique
  files      File[]   @ignore

  @@map("users")
  @@schema("school")
  @@ignore
}

model Profile {
  id        String   @id @default(cuid())
  user_id   String   @unique
  role      String
  full_name String?
  avatar_url String?
  @@schema("school")
}

enum StaffRole {
  TEACHER
  ADMIN
  PRINCIPAL
  ACCOUNTANT

  @@schema("school")
}

enum HomeworkStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE

  @@schema("school")
}

enum FeeType {
  TUITION
  EXAMINATION
  TRANSPORT
  LIBRARY
  LABORATORY
  MISCELLANEOUS

  @@schema("school")
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL

  @@schema("school")
}

enum NotificationType {
  HOMEWORK
  ATTENDANCE
  FEE
  GENERAL
  EXAM
  EMERGENCY

  @@schema("school")
}

enum GrievanceStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED

  @@schema("school")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY

  @@schema("school")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["school"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}
